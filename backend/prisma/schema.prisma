// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  name        String
  cpf         String   @unique
  dateOfBirth DateTime
  gender      String
  email       String   @unique
  password    String

  status         Boolean @default(true)
  inactiveReason String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  phones      Phone[]
  addresses   Address[]
  creditCards CreditCard[]

  order          Order[]
  exchangeCoupon ExchangeCoupon[]

  cart Cart?

  @@map("users")
}

model Phone {
  id     String @id @default(uuid())
  number String
  type   String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("phones")
}

model Address {
  id                 String  @id @default(uuid())
  zipCode            String
  number             String
  street             String
  typePublicPlace    String
  publicPlace        String?
  typeResidence      String
  neighborhood       String
  city               String
  state              String
  country            String
  delivery           Boolean
  charge             Boolean
  identifierDelivery String?
  identifier         String
  observation        String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  orders Order[]

  @@map("addresses")
}

model CreditCard {
  id           String   @id @default(uuid())
  flag         String
  number       String
  namePrinted  String
  cvv          String
  dateExpired  DateTime
  preferential Boolean

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  orderPayments OrderPayment[]

  @@map("creditCards")
}

model Product {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  image       String
  price       Decimal

  brand    String
  universe String
  material String

  weight Decimal
  height Decimal
  width  Decimal
  depth  Decimal

  isAvailable    Boolean @default(true)
  categoryIsAvailable CategoryStatusReason?
  inactiveReason String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  stock    Stock?  @relation(fields: [stockId], references: [id], onDelete: Cascade)
  stockId  String? @unique

  orderItems     OrderItem[]
  pricingGroup   PricingGroup? @relation(fields: [pricingGroupId], references: [id])
  pricingGroupId String?

  cartItem CartItem[]

  @@map("products")

}

enum CategoryStatusReason {
  FORA_DE_MERCADO
  INDISPONIVEL
  EM_ESTOQUE
}

model PricingGroup {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  discount    Decimal?

  created_at DateTime? @default(now())

  products Product[]

  @@map("pricing_groups")
}

model Stock {
  id String @id @default(uuid())

  product Product?

  quantity Int @default(0)
  reserved Int @default(0)

  updated_at DateTime? @updatedAt

  @@map("stock")
}

model Cart {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  items CartItem[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  isActive  Boolean  @default(true)

  @@map("carts")
}

model CartItem {
  id     String @id @default(uuid())
  cartId String
  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  quantity Int @default(1)

  added_at   DateTime  @default(now())
  expires_at DateTime?

  isExpired Boolean @default(false)

  @@map("cart_items")
}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int
  price     Float
  productId String
  orderId   String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Order {
  id            String   @id @default(uuid())
  userId        String
  total         Decimal
  status        String
  freight       Decimal
  discountValue Decimal?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     OrderItem[]
  address   Address?       @relation(fields: [addressId], references: [id], onDelete: SetNull)
  addressId String?
  
  payments  OrderPayment[]

  @@map("orders")
}

model OrderPayment {
  id           String  @id @default(uuid())
  orderId      String
  paymentMethodId String
  amount       Decimal  // Valor pago com este cartão de crédito
  status     PaymentStatus @default(pending)

  processedAt DateTime?

  order   Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  payment PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade)

  creditCardId String?
  creditCard CreditCard? @relation(fields: [creditCardId], references: [id], onDelete: SetNull)

  exchangeCouponId String?
  exchangeCoupon   ExchangeCoupon? @relation(fields: [exchangeCouponId], references: [id], onDelete: SetNull)

  @@map("order_payments")
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

model PaymentMethod {
  id          String         @id @default(uuid())
  type        PaymentType

  payments OrderPayment[]

  @@map("payment_methods")
}

enum PaymentType {
  credit_card
  coupon
  pix
  boleto
}

model ExchangeCoupon {
  id         String   @id @default(uuid())
  code       String   @unique
  value      Decimal
  status     String   @default("active")
  expiration DateTime
  isUsed     Boolean  @default(false)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  payments OrderPayment[]

  @@index([code, status]) 
  @@map("exchange_coupons")
}

model Log {
  id          String   @id @default(uuid())
  action      String   // Tipo de ação: "CREATE", "UPDATE", "DELETE"
  table       String   // Nome da tabela afetada (ex: "User", "Product")
  recordId    String   // ID do registro afetado
  userId      String  
  createdAt   DateTime @default(now())

  @@map("logs")
}
